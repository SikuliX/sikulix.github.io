(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{116:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,h=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return a?r.a.createElement(h,s(s({ref:t},b),{},{components:a})):r.a.createElement(h,s({ref:t},b))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var b=2;b<i;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},90:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(3),r=a(7),i=(a(0),a(116)),o={id:"global",title:"Global Settings",sidebar_label:"Global Settings"},s={unversionedId:"api/global",id:"api/global",isDocsHomePage:!1,title:"Global Settings",description:"Java Level",source:"@site/docs\\api\\global.md",slug:"/api/global",permalink:"/docs/api/global",editUrl:"https://github.com/SikuliX/sikulix.github.io/edit/website/docs/api/global.md",version:"current",sidebar_label:"Global Settings",sidebar:"docs",previous:{title:"Screen Interaction",permalink:"/docs/api/interacting"},next:{title:"Region",permalink:"/docs/api/region"}},l=[{value:"Presistent Data",id:"presistent-data",children:[]},{value:"Runtime Environment Information",id:"runtime-environment-information",children:[]},{value:"Settings for speed and reliability",id:"settings-for-speed-and-reliability",children:[]}],b={toc:l};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h4",{id:"java-level"},"Java Level"),Object(i.b)("p",null,"Java maintains a global storage for settings (key/value pairs), that can be accessed by the program/script. Sikuli uses it for some of it\u2019s settings too. Normally it is not necessary to access these settings at the Java level from a Sikuli script, since SikuliX provides getter and setter methods for accessing values, that make sense for scripting. One example is the list of paths, that SikuliX maintains to specify additional places to search for images (please refer to Importing other Sikuli Scripts for more information)."),Object(i.b)("p",null,"If needed, you may access the java settings storage as shown in the following example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},'import java.lang.System\n\n# get a value\nval = System.getProperty("key-of-property")\n\n# set a property\'s value\nSystem.setProperty("key-of-property", value)\n')),Object(i.b)("h4",{id:"jythonpython-level"},"Jython/Python Level"),Object(i.b)("p",null,"You may use all settings, that are defined in standard Python/Jython and that are available in your system environment."),Object(i.b)("p",null,"The modules ",Object(i.b)("inlineCode",{parentName:"p"},"sys")," and ",Object(i.b)("inlineCode",{parentName:"p"},"time")," are already imported, so you can use their methods without the need for an import statement."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"sys.path")," may be one of the most valuable settings, since it is used by Python/Jython to locate modules, that are referenced using ",Object(i.b)("inlineCode",{parentName:"p"},"import module"),". It is a list of path\u2019s, that is e.g. maintained by SikuliX to implement Importing other SikuliX Scripts as a standard compliant feature (exception: .Sikuli scripts cannot form a module tree)."),Object(i.b)("p",null,"If you want to use ",Object(i.b)("inlineCode",{parentName:"p"},"sys.path"),", it is recommended to do it as shown in the following example, to avoid appending the same entry again:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'myPath = "some-absolute-path"\nif not myPath in sys.path:\n        sys.path.append(myPath)\n')),Object(i.b)("h4",{id:"sikulix-level"},"SikuliX Level"),Object(i.b)("p",null,"SikuliX internally uses the class ",Object(i.b)("inlineCode",{parentName:"p"},"Settings")," to store globally used settings. Publicly available attributes may be accessed by using ",Object(i.b)("inlineCode",{parentName:"p"},"Settings.[name-of-an-attribute]")," to get it\u2019s value and ",Object(i.b)("inlineCode",{parentName:"p"},"Settings.attribute = value")," to set it. It is highly recommended to only modify attributes, that are described in this document or when you really know, what you are doing."),Object(i.b)("p",null,"Actually all attributes of some value for scripting are described in the topic Controlling SikuliX Scripts and their Behavior."),Object(i.b)("p",null,"To store some settings across SikuliX IDE sessions, SikuliX utilizes the Java feature Preferences."),Object(i.b)("p",null,"As persistent storage Java uses:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"on Windows the registry branch HKCUSoftwareJavaSoftPrefsorgsikuli\u2026"),Object(i.b)("li",{parentName:"ul"},"on Mac a plist file in ~/Library/Preferences/org.sikuli\u2026..plist"),Object(i.b)("li",{parentName:"ul"},"on Linux usually at ~/.java/.userPrefs/org/sikuli/prefs.xml")),Object(i.b)("p",null,"The content is controlled by the IDE\u2019s Preferences panel. It is safe to delete this branch/file, to get a default setup and might help in some situations, wher the startup of the IDE does not work or crashes."),Object(i.b)("h2",{id:"presistent-data"},"Presistent Data"),Object(i.b)("p",null,"You can have a so called Property File somewhere on the file system, that you can prefill with key-value-pairs representing information, that can be used by your scripts for whatever purpose at runtime. So it can be used instaed of commandline parameters, for some kind of data-driven approach or for any other solution, that needs information to be persistent over time."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"# this is a property file\nkey1 = value1\nkey2 = value2\n...\n")),Object(i.b)("p",null,"At runtime in your script, you first load such a property file into an in-memory store and then access the values using their keys (both basically are strings). You might change existing values, add new values and remove values. At any time you might save the store content back to the originating file or to another file."),Object(i.b)("p",null,"Currently there is no Auto-Save feature, so that your changes are lost in case of crashes before you saved the store back to a file. The feature might not be fully thread safe."),Object(i.b)("h4",{id:"features-that-operate-on-the-store-as-entity"},"Features that operate on the store as entity"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"loadOpts(filePath)")),"\nLoads a property file into an internal store"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tfilePath \u2013 absolute or relative to the working folder"),Object(i.b)("li",{parentName:"ul"},"Returns:\tthe reference to the internal store to be used with the store functions")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"saveOpts(store)")),"\nSaves the store back to the file it was loaded from"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tstore \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"Returns:\ttrue if it worked, false otherwise")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"saveOpts(store, filepath)")),"\nSaves the store to the given file, overwritten without notice"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"filePath \u2013 absolute or relative to the working folder"))),Object(i.b)("li",{parentName:"ul"},"Returns:\ntrue if it worked, false otherwise")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"makeOpts()")),"\nMakes a new, empty internal store, that might be saved to a file later"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns:\tthe reference to the internal store to be used with the store functions")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"delOpts(store)")),"\nPurges all key-value-pairs from the store (make it empty)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tstore \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"Returns:\ttrue if it worked, false otherwise")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"hasOpts(store)")),"\nCounts the key-value-pairs in the store"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tstore \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"Returns:\ta positive number (0 means empty)")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOpts(store)")),"\nLoads the key-value-pairs into a dictionary (Java: Map(String, String)), to be able to use more powerful features on the store information"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tstore \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"Returns:\tthe dictionary filled with the key-value-pairs")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"setOpts(store, map)")),"\nStores the key-value-pairs from a dictionary (Java: Map(String, String)) to the given store"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"map \u2013 the dictionary/map containing the key-value-pairs"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe number of stored key-value-pairs (0 might signal a problem)")),Object(i.b)("h4",{id:"features-that-operate-on-individual-entries-in-a-loaded-store"},"Features that operate on individual entries in a loaded store"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"hasOpt(store, key)")),"\nChecks the existence of a key-value-pair"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nTrue if the key exists, false otherwise")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOpt(store, key","[, default]",")")),"\nReads the value of a specific key and get the default value, if the key does not exist. If the key does not exists and no default is given, an empty string is returned."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"),Object(i.b)("li",{parentName:"ul"},"default \u2013 an optional value in case the key does not exist in the store"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe stored value or the default")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"setOpt(store, key, value)")),"\nSets the value of a specific key. if the key does not exist, the key-value-pair is added, otherwise the value is overwritten."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"),Object(i.b)("li",{parentName:"ul"},"value \u2013 a string value to be stored with the given key"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe stored value before the change, an empty string if the key did not exist yet")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"delOpt(store, key)")),"\nDeletes the key-value-pair from the store"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe stored value before the deletion, an empty string if the key did not exist yet")),Object(i.b)("h5",{id:"convenience-functions-for-number-values"},"Convenience functions for number values"),Object(i.b)("p",null,"Since the values in the store are strings only, the following functions take care for the necessary conversions. All returned numbers are of format double."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOptNum(store, key","[, default]",")")),"\nReads the value of a specific key and get the default value, if the key does not exist. If the key does not exists and no default is given, a 0.0 is returned."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"),Object(i.b)("li",{parentName:"ul"},"default \u2013 an optional number value in case the key does not exist in the store"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nthe stored value as double or the default")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"setOptNum(store, key, value)")),"\nSet the value of a specific key. if the key does not exist, the key-value-pair is added, otherwise the value is overwritten."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"store \u2013 the reference to a loaded store"),Object(i.b)("li",{parentName:"ul"},"key \u2013 the key as string of a stored key-value-pair"),Object(i.b)("li",{parentName:"ul"},"value \u2013 an valid number value to be stored with the given key"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe stored value before the change, a 0.0 if the key did not exist yet")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"The following feature only works on the same machine"))),Object(i.b)("p",null,"\u2026 and has nothing to do with the above feature, but can of course be combined."),Object(i.b)("p",null,"You might use SikuliX\u2019s persistent storage, to store and reload your own information accross SikuliX sessions or only across different runs of same or different scripts/programs."),Object(i.b)("p",null,"There is no feature to preload the store before the first run nor to export your information."),Object(i.b)("p",null,"Sikulix.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"prefStore(key, value)")),"\nStore a key-value-pair in Javas persistent preferences store"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"key \u2013 an item name as string"),Object(i.b)("li",{parentName:"ul"},"value \u2013 a string value to be stored as the item\u2019s content")))),Object(i.b)("p",null,"Sikulix.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"prefLoad(key","[, value]",")")),"\nRetrieve the value of a previously stored key-value-pair using key as the item\u2019s name"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"key \u2013 an item name as string"),Object(i.b)("li",{parentName:"ul"},"value \u2013 an optional string value to be returned, if the item was not yet stored like some default"))),Object(i.b)("li",{parentName:"ul"},"Returns:\nThe item\u2019s content if the item exists, otherwise an empty string or the given default")),Object(i.b)("p",null,"Sikulix.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"prefRemove(key)")),"\nPermanently remove the key-value-pair using key as the item\u2019s name"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tkey \u2013 an item name as string"),Object(i.b)("li",{parentName:"ul"},"Returns:\tthe item\u2019s content if the item exists, otherwise an empty string")),Object(i.b)("p",null,"Sikulix.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"prefRemove()")),"\nPermanently remove all key-value-pairs stored before using Sikulix.prefStore()"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tkey \u2013 an item name as string"),Object(i.b)("li",{parentName:"ul"},"Returns:\tthe item\u2019s content if the item exists, otherwise an empty string")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"runtime-environment-information"},"Runtime Environment Information"),Object(i.b)("p",null,"The class ",Object(i.b)("inlineCode",{parentName:"p"},"Env")," is deprecated and should not be used anymore. The contained features are moved to other places and redirected from inside class ",Object(i.b)("inlineCode",{parentName:"p"},"Env")," to be downward compatible."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"In the following the non-Env methods are the replacements, that should be used instead."))),Object(i.b)("p",null,"Settings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOS()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOS()")),"\nSettings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOSVersion()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getOSVersion()"))),Object(i.b)("p",null,"Get the type ( getOS() ) and version string ( getOSVersion() ) of the operating system your script is running on."),Object(i.b)("p",null,"An example using these methods on a Mac is shown below:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},'# on a Mac\nmyOS = Settings.getOS()\nmyVer = Settings.getOSVersion()\n\nif myOS == OS.MAC:\n        print "Mac " + myVer # e.g., Mac 10.6.3\nelse:\n        print "Sorry, not a Mac"\n\nmyOS = Settings.getOS()\nif myOS == "MAC" or myOS.startswith("M"):\n        print "Mac " + myVer # e.g., Mac 10.6.3\nelse:\n        print "Sorry, not a Mac"\n')),Object(i.b)("p",null,"There are convenience functions, to check wether we are running on a specific system:"),Object(i.b)("p",null,"Settings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"isWindows()")),"\nSettings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"isMac()")),"\nSettings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"isLinux()"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns:\tTrue if we are running on this system, False otherwise")),Object(i.b)("p",null,"Settings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getVersion()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getSikuliVersion()")),"\nGets the version of SikuliX."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns:\ta string containing the version string")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},'if not Settings.getSikuliVersion().contains("1.0.1"):\n        print "This script needs SikuliX 1.0.1"\n        exit(1)\n')),Object(i.b)("p",null,"Settings.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getVersionBuild()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getSikuliVersionBuild()")),"\nGets the version of SikuliX with detailed build info (number and date-time)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns:\ta string containing the version string")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"print Settings.getVersionBuild()\n# prints: 1.1.4-SNAPSHOT-#205-2019-02-22_10:50\n")),Object(i.b)("p",null,"App.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getClipboard()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getClipboard()")),"\nGets the content of the clipboard if it is text, otherwise an empty string."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"When using ",Object(i.b)("inlineCode",{parentName:"p"},"Env.getClipboard()")," together with ",Object(i.b)("inlineCode",{parentName:"p"},"paste()"),", paste internally uses the clipboard to transfer text to other applications, the clipboard will contain what you just pasted. Therefore, if you need the content of the clipboard, you should call ",Object(i.b)("inlineCode",{parentName:"p"},"Env.getClipboard()")," before using ",Object(i.b)("inlineCode",{parentName:"p"},"paste()"),"."))),Object(i.b)("p",null,":::Tip\nWhen the clipboard content was copied from a web page that mixes images and text, you should be aware, that there may be whitespace characters around and inside your text, that you might not have expected. In this case, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"Env.getClipboard().strip()")," to at least get rid of surrounding white spaces.\n:::"),Object(i.b)("p",null,"Key.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"isLockOn(key-constant)")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"isLockOn(keyConstant)")),"\nGet the current status ( on / off ) off the respective key. Only one key can be specified."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tkeyConstant \u2013 one of the key constants Key.CAPS_LOCK, Key.NUM_LOCK, Key.SCROLL_LOCK"),Object(i.b)("li",{parentName:"ul"},"Returns:\tTrue if the specified key is on, False otherwise")),Object(i.b)("p",null,"Further information about key constants can be found in Class Key."),Object(i.b)("p",null,"Mouse.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"at()")),"\nEnv.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getMouseLocation()")),"\nGet the current location of the mouse cursor."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns:\ta Location object of the position of the mouse cursor on the screen.")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settings-for-speed-and-reliability"},"Settings for speed and reliability"),Object(i.b)("p",null,":::Note\nIt is not recommended, to use this.\n:::"),Object(i.b)("p",null,"With version 1.2 the matching process will be revised anyway and might bring other options. If you really want to speed up the search process, take care, that you are searching in a region being as small as possible."),Object(i.b)("p",null,"Here you get more information about how to make your workflow fast and robust."),Object(i.b)("p",null,"Vision.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"setParameter(param, value)")),"\nSet the parameter param of the vision algorithm to value."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\t",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"param \u2013 a string that indicates the parameter to set."),Object(i.b)("li",{parentName:"ul"},"value \u2013 a float value.")))),Object(i.b)("p",null,"Vision.",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"getParameter(param)")),"\nGet the parameter param of the vision algorithm."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:\tparam \u2013 a string that indicates the parameter to get."),Object(i.b)("li",{parentName:"ul"},"Returns:\tthe float value of the specified parameter.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"MinTargetSize")),"\n",Object(i.b)("inlineCode",{parentName:"p"},"MinTargetSize")," is the minimum image size to which SikuliX can resize."),Object(i.b)("p",null,"If you feel that SikuliX is running too slow, you might try a smaller value than 12. On the other hand, if you see SikuliX returns a match that is not what you expect, i.e. a false match, try to increase MinTargetSize to make SikuliX be more robust to small details."),Object(i.b)("p",null,"You can tune this parameter using the following Jython code:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'from org.sikuli.natives import Vision\nVision.setParameter("MinTargetSize", 6) # the default is 12.\nSetting the size to a smaller value would make the matching algorithm be faster.\n')),Object(i.b)("hr",null))}c.isMDXComponent=!0}}]);